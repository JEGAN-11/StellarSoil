import { useParams, useNavigate } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { 
  MinusIcon,
  PlusIcon,
  ShoppingCartIcon,
  CurrencyDollarIcon,
  ScaleIcon
} from '@heroicons/react/24/outline';
import API from '../api/api';

const PurchaseProduce = () => {
  const { farmId, productId } = useParams();
  const [quantity, setQuantity] = useState(1);
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await API.get(`/products/${productId}`);
        setProduct(response.data);
      } catch (err) {
        setError('Error loading product details');
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [productId]);

  const handlePurchase = async (e) => {
    e.preventDefault();
    try {
      await API.post('/orders', { 
        productId,
        farmId,
        quantity,
        totalPrice: product.price * quantity 
      });
      navigate('/checkout');
    } catch (err) {
      setError('Error processing purchase');
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-emerald-50 to-lime-50 pt-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 w-full">
        {loading ? (
          <div className="animate-pulse space-y-8">
            <div className="h-6 bg-gray-200 rounded w-1/4"></div>
            <div className="h-80 bg-gray-200 rounded"></div>
          </div>
        ) : error ? (
          <div className="text-center text-red-600">{error}</div>
        ) : product && (
          <div className="bg-white/80 backdrop-blur-xl rounded-2xl shadow-xl p-8">
            <h1 className="text-3xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
              {product.name}
            </h1>
            <p className="mt-2 text-gray-600">{product.description}</p>
          </div>
        )}

        {/* Purchase Form */}
        {product && (
          <div className="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
            <div className="aspect-w-1 aspect-h-1 bg-white rounded-2xl overflow-hidden">
              <img
                src={product.images?.[0] || '/placeholder.jpg'}
                alt={product.name}
                className="w-full h-full object-cover"
              />
            </div>

            <div className="bg-white/80 backdrop-blur-xl rounded-2xl shadow-xl p-8">
              <form onSubmit={handlePurchase} className="space-y-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Quantity ({product.unit})
                  </label>
                  <div className="flex items-center space-x-4">
                    <button
                      type="button"
                      onClick={() => quantity > 1 && setQuantity(q => q - 1)}
                      className="p-2 rounded-full border border-gray-300 hover:border-green-500 transition-all duration-200"
                    >
                      -
                    </button>
                    <input
                      type="number"
                      value={quantity}
                      onChange={(e) => {
                        const val = parseInt(e.target.value);
                        if (val > 0 && val <= product.availableQuantity) {
                          setQuantity(val);
                        }
                      }}
                      className="w-20 text-center border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500"
                    />
                    <button
                      type="button"
                      onClick={() => quantity < product.availableQuantity && setQuantity(q => q + 1)}
                      className="p-2 rounded-full border border-gray-300 hover:border-green-500 transition-all duration-200"
                    >
                      +
                    </button>
                  </div>
                  <p className="mt-2 text-sm text-gray-500">
                    {product.availableQuantity} {product.unit}s available
                  </p>
                </div>

                <div className="border-t border-gray-200 pt-4">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">Price per {product.unit}</span>
                    <span className="text-xl font-semibold text-gray-900">₹{product.price}</span>
                  </div>
                  <div className="flex justify-between items-center mt-2">
                    <span className="text-gray-600">Total</span>
                    <span className="text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">
                      ₹{(product.price * quantity).toFixed(2)}
                    </span>
                  </div>
                </div>

                <div className="pt-4">
                  <button
                    type="submit"
                    className="w-full rounded-full bg-gradient-to-r from-green-600 to-emerald-600 px-8 py-4 text-base font-semibold text-white shadow-lg hover:from-green-700 hover:to-emerald-700 transition-all duration-300"
                  >
                    Purchase Now
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
                  className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-gradient-to-r from-primary-500 to-secondary-500 hover:from-primary-600 hover:to-secondary-600 transform hover:-translate-y-0.5 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                >
                  Confirm Booking
                </button>
              </div>
            </form>
          </div>

          <div className="bg-white rounded-2xl shadow-sm p-8 flex flex-col h-full min-h-[500px] justify-between">
            <div className="text-center flex flex-col h-full justify-between">
              <div>
                <div className="mx-auto w-24 h-24 rounded-full bg-gradient-to-br from-primary-100 to-secondary-100 flex items-center justify-center mb-6">
                  <CalendarIcon className="h-12 w-12 text-primary-600" />
                </div>
                <h2 className="text-2xl font-semibold bg-gradient-to-r from-primary-600 to-secondary-600 bg-clip-text text-transparent mb-4">
                  Booking Information
                </h2>
                <p className="text-gray-600 mb-6">
                  Select your preferred date and time for the appointment. Make sure to arrive 10 minutes before your scheduled time.
                </p>
              </div>
              <div className="space-y-4 text-left mt-6">
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-medium text-gray-900">Available Hours</h3>
                  <p className="text-sm text-gray-500">Monday - Friday: 9:00 AM - 5:00 PM</p>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-medium text-gray-900">Appointment Duration</h3>
                  <p className="text-sm text-gray-500">30 minutes per session</p>
                </div>
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-medium text-gray-900">Cancellation Policy</h3>
                  <p className="text-sm text-gray-500">Free cancellation up to 24 hours before the appointment</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookAppointment;
